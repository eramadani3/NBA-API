import pandas as pd
from nba_api.stats.static import players
from nba_api.stats.endpoints import playercareerstats
import os

# Function to calculate PER (simplified)
def calculate_per(stats):
    # ...implement PER calculation...
    pass

# Function to get player PER by player name
def get_player_per(player_name):
    # Get player ID from player name
    player_info = players.find_players_by_full_name(player_name)
    if not player_info:
        print(f'Player not found: {player_name}')
        return None
    
    player_id = player_info[0]['id']
    
    # Get player career stats
    career_stats = playercareerstats.PlayerCareerStats(player_id=player_id)
    career_df = career_stats.get_data_frames()[0]
    
    # Calculate PER for each season
    career_df['PER'] = career_df.apply(calculate_per, axis=1)
    
    return career_df[['SEASON_ID', 'PER']]

# Define the path to the draft_picks folder
draft_picks_folder = os.path.join('..', 'draft_picks')

# Define the path to the per_data folder
per_data_folder = os.path.join('..', 'per_data')
os.makedirs(per_data_folder, exist_ok=True)

# Loop through each draft pick file from 1 to 60
for pick_number in range(1, 61):
    # Build the file path
    csv_file = os.path.join(draft_picks_folder, f'nba_draft_pick_{pick_number}.csv')
    
    # Check if the file exists
    if not os.path.exists(csv_file):
        print(f'File not found: {csv_file}')
        continue
    
    # Read CSV file
    df = pd.read_csv(csv_file)
    
    # Create an empty DataFrame to hold PER data
    per_data = pd.DataFrame(columns=['PLAYER_NAME', 'SEASON_ID', 'PER'])
    
    # Loop through each player in the CSV file
    for index, row in df.iterrows():
        player_name = row['PLAYER_NAME']
        print(f'Fetching PER for {player_name}')
        
        # Get player PER
        per_df = get_player_per(player_name)
        if per_df is not None:
            per_df.insert(0, 'PLAYER_NAME', player_name)
            per_data = per_data.append(per_df, ignore_index=True)
    
    # Write PER data to a new CSV file
    per_csv_file = os.path.join(per_data_folder, f'per_data_pick_{pick_number}.csv')
    per_data.to_csv(per_csv_file, index=False)

